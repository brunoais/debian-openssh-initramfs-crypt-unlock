#!/bin/sh

PREREQ="udev"

prereqs() {
    echo "$PREREQ"
}

case "$1" in
    prereqs)
        prereqs
        exit 0
    ;;
esac

[ "$IP" != off ] && [ "$IP" != none ] && [ -x /sbin/sshd ] || exit 0

run_openssh() {
    # always run configure_networking() before openssh; on NFS
    # mounts this has been done already
    [ "$boot" = nfs ] || configure_networking

    # create privilege separation directory
    mkdir -p /run/sshd

    log_begin_msg "Starting initramfs OpenSSH"

    trap 'exit 0' INT HUP QUIT TERM ALRM USR1
    trap 'log_end_msg' EXIT

    # using exec and keeping openssh in the foreground enables the init-bottom
    # script to kill the remaining ipconfig processes if someone unlocks the
    # rootfs from the console while the network is being configured
    sleep 3
    exec /sbin/sshd -D
}

. /scripts/functions

# On NFS mounts, wait until the network is configured.  On local mounts,
# configure the network in the background (in run_openssh()) so someone
# with console access can enter the passphrase immediately.  (With the
# default ip=dhcp, configure_networking hangs for 5mins or so when the
# network is unavailable, for instance.)
[ "$boot" != nfs ] || configure_networking

run_openssh &
echo $! >/run/sshd.pid
